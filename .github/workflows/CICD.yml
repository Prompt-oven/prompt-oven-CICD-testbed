name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [closed, reopened]
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - uses: pnpm/action-setup@v4
        with:
          version: 9.12.2

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ matrix.node-version }}-${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ matrix.node-version }}-${{ runner.os }}-pnpm-store-
      
      # Install and build
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build applications
        run: pnpm turbo build
      
      # Prepare artifact
      - name: Prepare artifact
        run: |
          mkdir -p artifact
          # Copy Next.js builds
          cp -r apps/client/.next artifact/client-next
          cp -r apps/admin/.next artifact/admin-next
          
          # Copy public directories
          mkdir -p artifact/client-public artifact/admin-public
          [ -d "apps/client/public" ] && cp -r apps/client/public/. artifact/client-public/
          [ -d "apps/admin/public" ] && cp -r apps/admin/public/. artifact/admin-public/
          
          # Copy package files
          cp pnpm-lock.yaml pnpm-workspace.yaml package.json turbo.json artifact/
          cp apps/client/package.json artifact/client-package.json
          cp apps/admin/package.json artifact/admin-package.json
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-app
          path: artifact
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: next-app
          path: artifact
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/prompt_oven_fe_testbed:latest .
      
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/prompt_oven_fe_testbed:latest
  
      
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_FE_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          timeout: 60s
          script: |
            echo "Stopping existing container..."
            sudo docker stop prompt_oven_fe_testbed || true
            sudo docker rm prompt_oven_fe_testbed || true
            
            echo "Pulling latest image..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/prompt_oven_fe_testbed:latest
            
            echo "Running container..."
            sudo docker run -d --name prompt_oven_fe_testbed -p 3000:3000 -p 3001:3001 ${{ secrets.DOCKERHUB_USERNAME }}/prompt_oven_fe_testbed:latest
            
            echo "Cleaning up unused Docker images..."
            sudo docker image prune -f